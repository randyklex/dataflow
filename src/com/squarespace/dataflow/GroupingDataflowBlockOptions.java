package com.squarespace.dataflow;

public class GroupingDataflowBlockOptions extends DataflowBlockOptions {

    static final GroupingDataflowBlockOptions Default = new GroupingDataflowBlockOptions();

    /*
     * Whether the block should greedily consume offered messages.
     */
    private boolean greedy = true;

    /*
     * The maximum number of groups that should be generated by the block.
     */
    private long maxNumberOfGroups = Unbounded;

    public GroupingDataflowBlockOptions()
    { }

    GroupingDataflowBlockOptions DefaultOrClone() {
        if (this == Default)
            return this;
        else {
            GroupingDataflowBlockOptions rval = new GroupingDataflowBlockOptions();

            /* TODO: Have to add the TaskScheduler and CancellationToken stuff */

            rval.setMaxMessagesPerTask(this.getMaxMessagesPerTask());
            rval.setBoundedCapacity(this.getBoundedCapacity());
            rval.setNameFormat(this.getNameFormat());
            rval.setEnsureOrdered(this.getEnsureOrdered());
            rval.setGreedy(this.getGreedy());
            rval.setMaxNumberOfGroups(this.getMaxNumberOfGroups());

            return rval;
        }
    }

    public boolean getGreedy()
    {
        return greedy;
    }

    public void setGreedy(boolean value)
    {
        if (this == Default)
            throw new IllegalStateException("Default instance is supposed to be immutable.");

        greedy = value;
    }

    public long getMaxNumberOfGroups()
    {
        return maxNumberOfGroups;
    }

    public void setMaxNumberOfGroups(long value)
    {
        if (this == Default)
            throw new IllegalStateException("Default instance is supposed to be immutable.");

        if (value < 0 && value != Unbounded)
            throw new IllegalArgumentException(String.format("Value must be greater than 0, or {0}", Integer.toString(Unbounded)));

        maxNumberOfGroups = value;
    }

    /*
     * Gets a MaxNumberOfGroups value that may be used for comparison purposes.
     * This method will always return a positive value.
     */
    long getActualMaxNumberOfGroups()
    {
        return (maxNumberOfGroups == Unbounded) ? Long.MAX_VALUE : maxNumberOfGroups;
    }
}
